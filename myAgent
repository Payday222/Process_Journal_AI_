using Unity.MLAgents;
using Unity.MLAgents.Sensors;
using Unity.MLAgents.Actuators;
using UnityEngine;
public class myAgent : Agent
{
    public Transform targetTransform;
    public float movespeed = 2f;
          float previousDistanceToTarget;

    public override void Initialize()
    {
        targetTransform.position = new Vector3(Random.Range(-5,5), Random.Range(-5,5), 0);
        transform.localPosition = new Vector3(Random.Range(-5,5), Random.Range(-5,5), 0);
        Debug.Log($"init");
    }

    // public void  Update()
    // {
    //     RequestDecision();
 
    // }   
    public override void CollectObservations(VectorSensor sensor)
    {
        sensor.AddObservation(transform.localPosition);
        sensor.AddObservation(targetTransform.localPosition);
        // Debug.Log($"observation");
    }
    public override void OnActionReceived(ActionBuffers actions)
    {
        // Debug.Log($"Onactionrecieved called");
        float moveX = actions.ContinuousActions[0];
        float moveY = actions.ContinuousActions[1];
        
        Vector3 move = new Vector3(moveX, moveY, 0) * movespeed;
        transform.Translate(move);
        transform.localPosition += move;
        
         float distanceToTarget = Vector3.Distance(transform.localPosition, targetTransform.localPosition);
        if(previousDistanceToTarget > distanceToTarget) {
            Debug.Log($"getting closer");
            SetReward(0.1f);
        } else {
            SetReward(-0.1f);
        }

        if(distanceToTarget < 1.0f) {
            Debug.Log($"reached target");
            SetReward(1.0f);
            EndEpisode();
            Initialize();
        } else if(distanceToTarget > 10f) {
            SetReward(-1.0f);
            EndEpisode();
            Initialize();
        }  
        previousDistanceToTarget = distanceToTarget;
    }
    public override void Heuristic(in ActionBuffers actionsOut)
    {
        var ContinuousActions = actionsOut.ContinuousActions;
        ContinuousActions[0] = Input.GetAxis("Horizontal");
        ContinuousActions[1] = Input.GetAxis("Vertical");
    }

}
